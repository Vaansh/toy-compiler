[blockcmt, b' sort the array ', 1, 1]
[blockcmt, b' sort the array ', 1, 1]
[id, bubbleSort1, 2, 6]
[openpr, (, 2, 17]
[id, arr, 2, 18]
[colon, :, 2, 21]
[integer, integer, 2, 23]
[openspr, [, 2, 30]
[closespr, ], 2, 31]
[comma, ,, 2, 32]
[id, size, 2, 34]
[colon, :, 2, 38]
[integer, integer, 2, 40]
[closepr, ), 2, 47]
[arrow, ->, 2, 49]
[void, void, 2, 52]
[opencpr, {, 3, 1]
[let, let, 4, 3]
[id, n, 4, 7]
[colon, :, 4, 8]
[integer, integer, 4, 10]
[semi, ;, 4, 17]
[let, let, 5, 3]
[id, i, 5, 7]
[colon, :, 5, 8]
[integer, integer, 5, 10]
[semi, ;, 5, 17]
[let, let, 6, 3]
[id, j, 6, 7]
[colon, :, 6, 8]
[integer, integer, 6, 10]
[semi, ;, 6, 17]
[let, let, 8, 3]
[id, temp, 8, 7]
[colon, :, 8, 11]
[integer, integer, 8, 13]
[semi, ;, 8, 20]
[id, n, 9, 3]
[assgn, =, 9, 5]
[id, size, 9, 7]
[semi, ;, 9, 11]
[id, i, 10, 3]
[assgn, =, 10, 5]
[intlit, 0, 10, 7]
[semi, ;, 10, 8]
[id, j, 11, 3]
[assgn, =, 11, 5]
[intlit, 0, 11, 7]
[semi, ;, 11, 8]
[id, temp, 12, 3]
[assgn, =, 12, 8]
[intlit, 0, 12, 10]
[semi, ;, 12, 11]
[while, while, 13, 3]
[openpr, (, 13, 9]
[id, i, 13, 10]
[lt, <, 13, 12]
[id, n, 13, 14]
[minus, -, 13, 15]
[intlit, 1, 13, 16]
[closepr, ), 13, 17]
[opencpr, {, 13, 19]
[while, while, 14, 5]
[openpr, (, 14, 11]
[id, j, 14, 12]
[lt, <, 14, 14]
[id, n, 14, 16]
[minus, -, 14, 17]
[id, i, 14, 18]
[minus, -, 14, 19]
[intlit, 1, 14, 20]
[closepr, ), 14, 21]
[opencpr, {, 14, 23]
[if, if, 15, 7]
[openpr, (, 15, 10]
[id, arr, 15, 11]
[openspr, [, 15, 14]
[id, j, 15, 15]
[closespr, ], 15, 16]
[gt, >, 15, 18]
[id, arr, 15, 20]
[openspr, [, 15, 23]
[id, j, 15, 24]
[plus, +, 15, 25]
[intlit, 1, 15, 26]
[closespr, ], 15, 27]
[closepr, ), 15, 28]
[then, then, 16, 9]
[opencpr, {, 16, 14]
[inlinecmt,  swap temp and arr[i], 17, 11]
[inlinecmt,  swap temp and arr[i], 17, 11]
[assgn, =, 18, 16]
[id, arr, 18, 18]
[openspr, [, 18, 21]
[id, j, 18, 22]
[closespr, ], 18, 23]
[semi, ;, 18, 24]
[id, arr, 19, 11]
[openspr, [, 19, 14]
[id, j, 19, 15]
[closespr, ], 19, 16]
[assgn, =, 19, 18]
[id, arr, 19, 20]
[openspr, [, 19, 23]
[id, j, 19, 24]
[plus, +, 19, 25]
[intlit, 1, 19, 26]
[closespr, ], 19, 27]
[semi, ;, 19, 28]
[id, arr, 20, 11]
[openspr, [, 20, 14]
[id, j, 20, 15]
[plus, +, 20, 16]
[intlit, 1, 20, 17]
[closespr, ], 20, 18]
[assgn, =, 20, 20]
[id, temp, 20, 22]
[semi, ;, 20, 26]
[closecpr, }, 21, 9]
[else, else, 21, 11]
[semi, ;, 21, 16]
[id, j, 22, 9]
[assgn, =, 22, 11]
[id, j, 22, 13]
[plus, +, 22, 14]
[intlit, 1, 22, 15]
[semi, ;, 22, 16]
[closecpr, }, 23, 7]
[semi, ;, 23, 8]
[id, i, 24, 5]
[assgn, =, 24, 7]
[id, i, 24, 9]
[plus, +, 24, 10]
[intlit, 1, 24, 11]
[semi, ;, 24, 12]
[closecpr, }, 25, 3]
[semi, ;, 25, 4]
[closecpr, }, 26, 1]
[blockcmt, b' print the array ', 28, 1]
[blockcmt, b' print the array ', 28, 1]
[id, printArray, 29, 6]
[openpr, (, 29, 16]
[id, arr, 29, 17]
[colon, :, 29, 20]
[integer, integer, 29, 22]
[openspr, [, 29, 29]
[closespr, ], 29, 30]
[comma, ,, 29, 31]
[id, size, 29, 33]
[colon, :, 29, 37]
[integer, integer, 29, 39]
[closepr, ), 29, 46]
[arrow, ->, 29, 48]
[void, void, 29, 51]
[opencpr, {, 30, 1]
[let, let, 31, 3]
[id, n, 31, 7]
[colon, :, 31, 8]
[integer, integer, 31, 10]
[semi, ;, 31, 17]
[let, let, 32, 3]
[id, i, 32, 7]
[colon, :, 32, 8]
[integer, integer, 32, 10]
[semi, ;, 32, 17]
[id, n, 33, 3]
[assgn, =, 33, 5]
[id, size, 33, 7]
[semi, ;, 33, 11]
[id, i, 34, 3]
[assgn, =, 34, 5]
[intlit, 0, 34, 7]
[semi, ;, 34, 8]
[while, while, 35, 3]
[openpr, (, 35, 9]
[id, i, 35, 10]
[lt, <, 35, 11]
[id, n, 35, 12]
[closepr, ), 35, 13]
[opencpr, {, 35, 15]
[write, write, 36, 5]
[openpr, (, 36, 10]
[id, arr, 36, 11]
[openspr, [, 36, 14]
[id, i, 36, 15]
[closespr, ], 36, 16]
[closepr, ), 36, 17]
[semi, ;, 36, 18]
[id, i, 37, 7]
[assgn, =, 37, 9]
[id, i, 37, 11]
[plus, +, 37, 12]
[intlit, 1, 37, 13]
[semi, ;, 37, 14]
[closecpr, }, 38, 3]
[semi, ;, 38, 4]
[closecpr, }, 39, 1]
[inlinecmt,  main funtion to test above, 41, 1]
[inlinecmt,  main funtion to test above, 41, 1]
[id, main, 42, 6]
[openpr, (, 42, 10]
[closepr, ), 42, 11]
[arrow, ->, 42, 13]
[void, void, 42, 16]
[opencpr, {, 43, 1]
[let, let, 44, 3]
[id, arr, 44, 7]
[colon, :, 44, 10]
[integer, integer, 44, 12]
[openspr, [, 44, 19]
[intlit, 7, 44, 20]
[closespr, ], 44, 21]
[semi, ;, 44, 22]
[id, arr, 45, 3]
[openspr, [, 45, 6]
[intlit, 0, 45, 7]
[closespr, ], 45, 8]
[assgn, =, 45, 10]
[intlit, 64, 45, 12]
[semi, ;, 45, 14]
[id, arr, 46, 3]
[openspr, [, 46, 6]
[intlit, 1, 46, 7]
[closespr, ], 46, 8]
[assgn, =, 46, 10]
[intlit, 34, 46, 12]
[semi, ;, 46, 14]
[id, arr, 47, 3]
[openspr, [, 47, 6]
[intlit, 2, 47, 7]
[closespr, ], 47, 8]
[assgn, =, 47, 10]
[intlit, 25, 47, 12]
[semi, ;, 47, 14]
[id, arr, 48, 3]
[openspr, [, 48, 6]
[intlit, 3, 48, 7]
[closespr, ], 48, 8]
[assgn, =, 48, 10]
[intlit, 12, 48, 12]
[semi, ;, 48, 14]
[id, arr, 49, 3]
[openspr, [, 49, 6]
[intlit, 4, 49, 7]
[closespr, ], 49, 8]
[assgn, =, 49, 10]
[intlit, 22, 49, 12]
[semi, ;, 49, 14]
[id, arr, 50, 3]
[openspr, [, 50, 6]
[intlit, 5, 50, 7]
[closespr, ], 50, 8]
[assgn, =, 50, 10]
[intlit, 11, 50, 12]
[semi, ;, 50, 14]
[id, arr, 51, 3]
[openspr, [, 51, 6]
[intlit, 6, 51, 7]
[closespr, ], 51, 8]
[assgn, =, 51, 10]
[intlit, 90, 51, 12]
[semi, ;, 51, 14]
[id, printarray, 52, 3]
[openpr, (, 52, 13]
[id, arr, 52, 14]
[comma, ,, 52, 17]
[intlit, 7, 52, 19]
[closepr, ), 52, 20]
[semi, ;, 52, 21]
[id, bubbleSort, 53, 3]
[openpr, (, 53, 13]
[id, arr, 53, 14]
[comma, ,, 53, 17]
[intlit, 7, 53, 19]
[closepr, ), 53, 20]
[semi, ;, 53, 21]
[id, printarray, 54, 3]
[openpr, (, 54, 13]
[id, arr, 54, 14]
[comma, ,, 54, 17]
[intlit, 7, 54, 19]
[closepr, ), 54, 20]
[semi, ;, 54, 21]
[closecpr, }, 55, 1]
[blockcmt, b'\\n\\n    classes\\n\\n    --------------------------------------\\n\\n|X| no class declaration\\n\\n| | class declaration\\n\\n| | multiple class declarations\\n\\n| | no data member declaration\\n\\n| | data member declaration\\n\\n| | multiple data member declaration\\n\\n| | no member function declaration\\n\\n| | member function declaration\\n\\n| | multiple member function declaration\\n\\n| | no member\\n\\n| | no inherited class\\n\\n| | one inherited class\\n\\n| | multiple inherited classes\\n\\n| | private member specifier\\n\\n| | public member specifier\\n\\n\\n\\n    functions: definitions\\n\\n    --------------------------------------\\n\\n| | no main function definition\\n\\n|X| main function definition\\n\\n| | no free function definition\\n\\n|X| free function definition\\n\\n|X| multiple free function definitions\\n\\n|X| no member function definition\\n\\n| | member function definition\\n\\n| | multiple member function definitions\\n\\n|X| return type: void\\n\\n| | return type: integer\\n\\n| | return type: float\\n\\n| | return type: id\\n\\n| | return type: array (not allowed)\\n\\n\\n\\n    functions: formal parameters\\n\\n    --------------------------------------\\n\\n|X| type: integer\\n\\n| | type: float\\n\\n| | type: id\\n\\n|X| type: 1-dim array \\n\\n| | type: n-dim array\\n\\n| | type: array (with size)\\n\\n|X| type: array (without size)\\n\\n\\n\\n    functions: calls\\n\\n    --------------------------------------\\n\\n|X| free function call\\n\\n| | member function call\\n\\n| | parameters:0\\n\\n| | parameters:1\\n\\n|X| parameters:n\\n\\n|X| array parameter - 1-dim\\n\\n| | array parameter - n-dim\\n\\n| | array parameter - with size\\n\\n| | array parameter - without size\\n\\n| | function call as statement\\n\\n| | function call as expression factor\\n\\n| | expression as parameter\\n\\n\\n\\n    variable declaration\\n\\n    --------------------------------------\\n\\n|X| type: integer\\n\\n| | type: float\\n\\n| | type: string\\n\\n| | type: id\\n\\n|X| type: 1-dim array \\n\\n| | type: n-dim array\\n\\n|X| type: array (with size)\\n\\n| | type: array (without size) (not allowed)\\n\\n\\n\\n    function body: local variable declarations\\n\\n    --------------------------------------\\n\\n| | no local variable declarations\\n\\n|X| local variable declarations\\n\\n| | intertwined statements and variable declarations\\n\\n\\n\\n    function body: statements\\n\\n    --------------------------------------\\n\\n| | no statement\\n\\n| | 1 statement\\n\\n|X| n statements\\n\\n|X| if statement\\n\\n|X| if: empty then or else blocks\\n\\n| | if: 1-statement then or else blocks\\n\\n|X| if: n-statements then or else blocks\\n\\n|X| while statement\\n\\n| | while: empty block\\n\\n| | while: 1-statement block\\n\\n|X| while: n-statement block\\n\\n| | read(<variable>) statement\\n\\n|X| write(<expr>) statement\\n\\n|X| return(<expr>) statement\\n\\n|X| assignment statement\\n\\n\\n\\n    variable + idnest\\n\\n    --------------------------------------\\n\\n|X| id\\n\\n| | id.id\\n\\n| | id.id(id)\\n\\n| | id(id).id\\n\\n| | id(id).id()\\n\\n| | id.id[id]\\n\\n| | id[id].id\\n\\n| | id[id].id[id]\\n\\n| | id.id[id][id]\\n\\n| | id[id][id].id\\n\\n| | id[id][id].id[id][id]\\n\\n| | id(id).id[id]\\n\\n| | id(id).id[id][id]\\n\\n| | expression as array index\\n\\n\\n\\n    expressions\\n\\n    --------------------------------------\\n\\n|X| single variable\\n\\n|X| involving addop\\n\\n| | involving multop\\n\\n|X| involving relop\\n\\n| | involving addop + multop\\n\\n|X| involving multop + relop\\n\\n| | involving addop + multop + relop\\n\\n| | involving parentheses\\n\\n| | involving nested parentheses\\n\\n| | involving not\\n\\n| | involving sign\\n\\n|X| involving literals\\n\\n| | involving variable + idnest\\n\\n|X| involving function calls\\n\\n| | involving all the above in one expression\\n\\n', 57, 1]
[blockcmt, b'\\n\\n    classes\\n\\n    --------------------------------------\\n\\n|X| no class declaration\\n\\n| | class declaration\\n\\n| | multiple class declarations\\n\\n| | no data member declaration\\n\\n| | data member declaration\\n\\n| | multiple data member declaration\\n\\n| | no member function declaration\\n\\n| | member function declaration\\n\\n| | multiple member function declaration\\n\\n| | no member\\n\\n| | no inherited class\\n\\n| | one inherited class\\n\\n| | multiple inherited classes\\n\\n| | private member specifier\\n\\n| | public member specifier\\n\\n\\n\\n    functions: definitions\\n\\n    --------------------------------------\\n\\n| | no main function definition\\n\\n|X| main function definition\\n\\n| | no free function definition\\n\\n|X| free function definition\\n\\n|X| multiple free function definitions\\n\\n|X| no member function definition\\n\\n| | member function definition\\n\\n| | multiple member function definitions\\n\\n|X| return type: void\\n\\n| | return type: integer\\n\\n| | return type: float\\n\\n| | return type: id\\n\\n| | return type: array (not allowed)\\n\\n\\n\\n    functions: formal parameters\\n\\n    --------------------------------------\\n\\n|X| type: integer\\n\\n| | type: float\\n\\n| | type: id\\n\\n|X| type: 1-dim array \\n\\n| | type: n-dim array\\n\\n| | type: array (with size)\\n\\n|X| type: array (without size)\\n\\n\\n\\n    functions: calls\\n\\n    --------------------------------------\\n\\n|X| free function call\\n\\n| | member function call\\n\\n| | parameters:0\\n\\n| | parameters:1\\n\\n|X| parameters:n\\n\\n|X| array parameter - 1-dim\\n\\n| | array parameter - n-dim\\n\\n| | array parameter - with size\\n\\n| | array parameter - without size\\n\\n| | function call as statement\\n\\n| | function call as expression factor\\n\\n| | expression as parameter\\n\\n\\n\\n    variable declaration\\n\\n    --------------------------------------\\n\\n|X| type: integer\\n\\n| | type: float\\n\\n| | type: string\\n\\n| | type: id\\n\\n|X| type: 1-dim array \\n\\n| | type: n-dim array\\n\\n|X| type: array (with size)\\n\\n| | type: array (without size) (not allowed)\\n\\n\\n\\n    function body: local variable declarations\\n\\n    --------------------------------------\\n\\n| | no local variable declarations\\n\\n|X| local variable declarations\\n\\n| | intertwined statements and variable declarations\\n\\n\\n\\n    function body: statements\\n\\n    --------------------------------------\\n\\n| | no statement\\n\\n| | 1 statement\\n\\n|X| n statements\\n\\n|X| if statement\\n\\n|X| if: empty then or else blocks\\n\\n| | if: 1-statement then or else blocks\\n\\n|X| if: n-statements then or else blocks\\n\\n|X| while statement\\n\\n| | while: empty block\\n\\n| | while: 1-statement block\\n\\n|X| while: n-statement block\\n\\n| | read(<variable>) statement\\n\\n|X| write(<expr>) statement\\n\\n|X| return(<expr>) statement\\n\\n|X| assignment statement\\n\\n\\n\\n    variable + idnest\\n\\n    --------------------------------------\\n\\n|X| id\\n\\n| | id.id\\n\\n| | id.id(id)\\n\\n| | id(id).id\\n\\n| | id(id).id()\\n\\n| | id.id[id]\\n\\n| | id[id].id\\n\\n| | id[id].id[id]\\n\\n| | id.id[id][id]\\n\\n| | id[id][id].id\\n\\n| | id[id][id].id[id][id]\\n\\n| | id(id).id[id]\\n\\n| | id(id).id[id][id]\\n\\n| | expression as array index\\n\\n\\n\\n    expressions\\n\\n    --------------------------------------\\n\\n|X| single variable\\n\\n|X| involving addop\\n\\n| | involving multop\\n\\n|X| involving relop\\n\\n| | involving addop + multop\\n\\n|X| involving multop + relop\\n\\n| | involving addop + multop + relop\\n\\n| | involving parentheses\\n\\n| | involving nested parentheses\\n\\n| | involving not\\n\\n| | involving sign\\n\\n|X| involving literals\\n\\n| | involving variable + idnest\\n\\n|X| involving function calls\\n\\n| | involving all the above in one expression\\n\\n', 57, 1]
