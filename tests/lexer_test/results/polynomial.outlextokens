[inlinecmt,  ====== struct declarations ====== //, 1, 1]
[struct, struct, 2, 1]
[id, POLYNOMIAL, 2, 8]
[opencpr, {, 2, 19]
[public, public, 3, 2]
[func, func, 3, 9]
[id, evaluate, 3, 14]
[openpr, (, 3, 22]
[id, x, 3, 23]
[colon, :, 3, 24]
[float, float, 3, 26]
[closepr, ), 3, 31]
[arrow, ->, 3, 33]
[float, float, 3, 36]
[semi, ;, 3, 41]
[closecpr, }, 4, 1]
[semi, ;, 4, 2]
[struct, struct, 6, 1]
[id, LINEAR, 6, 8]
[inherits, inherits, 6, 15]
[id, POLYNOMIAL, 6, 24]
[opencpr, {, 6, 35]
[private, private, 7, 2]
[let, let, 7, 10]
[id, a, 7, 14]
[colon, :, 7, 15]
[float, float, 7, 17]
[semi, ;, 7, 22]
[private, private, 8, 2]
[let, let, 8, 10]
[id, b, 8, 14]
[colon, :, 8, 15]
[float, float, 8, 17]
[semi, ;, 8, 22]
[public, public, 9, 2]
[func, func, 9, 10]
[id, build, 9, 15]
[openpr, (, 9, 20]
[id, A, 9, 21]
[colon, :, 9, 22]
[float, float, 9, 24]
[comma, ,, 9, 29]
[id, B, 9, 31]
[colon, :, 9, 32]
[float, float, 9, 34]
[closepr, ), 9, 39]
[arrow, ->, 9, 41]
[id, LINEAR, 9, 44]
[semi, ;, 9, 50]
[public, public, 10, 2]
[func, func, 10, 10]
[id, evaluate, 10, 15]
[openpr, (, 10, 23]
[id, x, 10, 24]
[colon, :, 10, 25]
[float, float, 10, 27]
[closepr, ), 10, 32]
[arrow, ->, 10, 34]
[float, float, 10, 37]
[semi, ;, 10, 42]
[closecpr, }, 11, 1]
[semi, ;, 11, 2]
[struct, struct, 13, 1]
[id, QUADRATIC, 13, 8]
[inherits, inherits, 13, 18]
[id, POLYNOMIAL, 13, 27]
[opencpr, {, 13, 38]
[private, private, 14, 2]
[let, let, 14, 10]
[id, a, 14, 14]
[colon, :, 14, 15]
[float, float, 14, 17]
[semi, ;, 14, 22]
[private, private, 15, 2]
[let, let, 15, 10]
[id, b, 15, 14]
[colon, :, 15, 15]
[float, float, 15, 17]
[semi, ;, 15, 22]
[private, private, 16, 2]
[let, let, 16, 10]
[id, c, 16, 14]
[colon, :, 16, 15]
[float, float, 16, 17]
[semi, ;, 16, 22]
[public, public, 17, 2]
[func, func, 17, 10]
[id, build, 17, 15]
[openpr, (, 17, 20]
[id, A, 17, 21]
[colon, :, 17, 22]
[float, float, 17, 24]
[comma, ,, 17, 29]
[id, B, 17, 31]
[colon, :, 17, 32]
[float, float, 17, 34]
[comma, ,, 17, 39]
[id, C, 17, 41]
[colon, :, 17, 42]
[float, float, 17, 44]
[closepr, ), 17, 49]
[arrow, ->, 17, 51]
[id, QUADRATIC, 17, 54]
[semi, ;, 17, 63]
[public, public, 18, 2]
[func, func, 18, 10]
[id, evaluate, 18, 15]
[openpr, (, 18, 23]
[id, x, 18, 24]
[colon, :, 18, 25]
[float, float, 18, 27]
[closepr, ), 18, 32]
[arrow, ->, 18, 34]
[float, float, 18, 37]
[semi, ;, 18, 42]
[closecpr, }, 19, 1]
[semi, ;, 19, 2]
[inlinecmt,  ====== struct implementations ====== //, 21, 1]
[impl, impl, 22, 1]
[id, POLYNOMIAL, 22, 6]
[opencpr, {, 22, 17]
[func, func, 23, 3]
[id, evaluate, 23, 8]
[openpr, (, 23, 16]
[id, x, 23, 17]
[colon, :, 23, 18]
[float, float, 23, 20]
[closepr, ), 23, 25]
[arrow, ->, 23, 27]
[float, float, 23, 30]
[opencpr, {, 24, 3]
[return, return, 25, 5]
[openpr, (, 25, 12]
[intlit, 0, 25, 13]
[closepr, ), 25, 14]
[semi, ;, 25, 15]
[closecpr, }, 26, 3]
[closecpr, }, 27, 1]
[impl, impl, 29, 1]
[id, QUADRATIC, 29, 6]
[opencpr, {, 29, 16]
[func, func, 30, 3]
[id, evaluate, 30, 8]
[openpr, (, 30, 16]
[id, x, 30, 17]
[colon, :, 30, 18]
[float, float, 30, 20]
[closepr, ), 30, 25]
[arrow, ->, 30, 27]
[float, float, 30, 30]
[opencpr, {, 31, 3]
[let, let, 32, 5]
[id, result, 32, 9]
[colon, :, 32, 15]
[float, float, 32, 17]
[semi, ;, 32, 22]
[inlinecmt, Using Horner's method, 33, 5]
[id, result, 34, 5]
[assgn, =, 34, 12]
[id, a, 34, 14]
[semi, ;, 34, 15]
[id, result, 35, 5]
[assgn, =, 35, 12]
[id, result, 35, 14]
[mult, *, 35, 21]
[id, x, 35, 23]
[plus, +, 35, 25]
[id, b, 35, 27]
[semi, ;, 35, 28]
[id, result, 36, 5]
[assgn, =, 36, 12]
[id, result, 36, 14]
[mult, *, 36, 21]
[id, x, 36, 23]
[plus, +, 36, 25]
[id, c, 36, 27]
[semi, ;, 36, 28]
[return, return, 37, 5]
[openpr, (, 37, 12]
[id, result, 37, 13]
[closepr, ), 37, 19]
[semi, ;, 37, 20]
[closecpr, }, 38, 3]
[func, func, 39, 3]
[id, build, 39, 8]
[openpr, (, 39, 13]
[id, A, 39, 14]
[colon, :, 39, 15]
[float, float, 39, 17]
[comma, ,, 39, 22]
[id, B, 39, 24]
[colon, :, 39, 25]
[float, float, 39, 27]
[comma, ,, 39, 32]
[id, C, 39, 34]
[colon, :, 39, 35]
[float, float, 39, 37]
[closepr, ), 39, 42]
[arrow, ->, 39, 44]
[id, QUADRATIC, 39, 47]
[opencpr, {, 40, 3]
[let, let, 41, 5]
[id, new_function, 41, 9]
[colon, :, 41, 21]
[id, QUADRATIC, 41, 23]
[semi, ;, 41, 33]
[id, new_function, 42, 5]
[dot, ., 42, 17]
[id, a, 42, 18]
[assgn, =, 42, 20]
[id, A, 42, 22]
[semi, ;, 42, 23]
[id, new_function, 43, 5]
[dot, ., 43, 17]
[id, b, 43, 18]
[assgn, =, 43, 20]
[id, B, 43, 22]
[semi, ;, 43, 23]
[id, new_function, 44, 5]
[dot, ., 44, 17]
[id, c, 44, 18]
[assgn, =, 44, 20]
[id, C, 44, 22]
[semi, ;, 44, 23]
[return, return, 45, 5]
[openpr, (, 45, 12]
[id, new_function, 45, 13]
[closepr, ), 45, 25]
[semi, ;, 45, 26]
[closecpr, }, 46, 3]
[closecpr, }, 47, 1]
[impl, impl, 49, 1]
[id, LINEAR, 49, 6]
[opencpr, {, 49, 13]
[func, func, 50, 3]
[id, build, 50, 8]
[openpr, (, 50, 13]
[id, A, 50, 14]
[colon, :, 50, 15]
[float, float, 50, 17]
[comma, ,, 50, 22]
[id, B, 50, 24]
[colon, :, 50, 25]
[float, float, 50, 27]
[closepr, ), 50, 32]
[arrow, ->, 50, 34]
[id, LINEAR, 50, 37]
[opencpr, {, 51, 3]
[let, let, 52, 5]
[id, new_function, 52, 9]
[colon, :, 52, 21]
[id, LINEAR, 52, 23]
[semi, ;, 52, 29]
[id, new_function, 53, 5]
[dot, ., 53, 17]
[id, a, 53, 18]
[assgn, =, 53, 20]
[id, A, 53, 22]
[semi, ;, 53, 23]
[id, new_function, 54, 5]
[dot, ., 54, 17]
[id, b, 54, 18]
[assgn, =, 54, 20]
[id, B, 54, 22]
[semi, ;, 54, 23]
[return, return, 55, 5]
[openpr, (, 55, 12]
[id, new_function, 55, 13]
[closepr, ), 55, 25]
[semi, ;, 55, 26]
[closecpr, }, 56, 3]
[func, func, 57, 3]
[id, evaluate, 57, 8]
[openpr, (, 57, 16]
[id, x, 57, 17]
[colon, :, 57, 18]
[float, float, 57, 20]
[closepr, ), 57, 25]
[arrow, ->, 57, 27]
[float, float, 57, 30]
[opencpr, {, 58, 3]
[let, let, 59, 5]
[id, result, 59, 9]
[colon, :, 59, 15]
[float, float, 59, 17]
[semi, ;, 59, 22]
[id, result, 60, 5]
[assgn, =, 60, 12]
[floatlit, 0.0, 60, 14]
[semi, ;, 60, 17]
[id, result, 61, 5]
[assgn, =, 61, 12]
[id, a, 61, 14]
[mult, *, 61, 16]
[id, x, 61, 18]
[plus, +, 61, 20]
[id, b, 61, 22]
[semi, ;, 61, 23]
[return, return, 62, 5]
[openpr, (, 62, 12]
[id, result, 62, 13]
[closepr, ), 62, 19]
[semi, ;, 62, 20]
[closecpr, }, 63, 3]
[closecpr, }, 64, 1]
[inlinecmt,  ====== main ====== //, 66, 1]
[func, func, 67, 1]
[id, main, 67, 6]
[openpr, (, 67, 10]
[closepr, ), 67, 11]
[arrow, ->, 67, 13]
[void, void, 67, 16]
[opencpr, {, 68, 1]
[let, let, 69, 3]
[id, f1, 69, 7]
[colon, :, 69, 9]
[id, LINEAR, 69, 11]
[semi, ;, 69, 17]
[let, let, 70, 3]
[id, f2, 70, 7]
[colon, :, 70, 9]
[id, QUADRATIC, 70, 11]
[semi, ;, 70, 20]
[let, let, 71, 3]
[id, counter, 71, 7]
[colon, :, 71, 14]
[integer, integer, 71, 16]
[semi, ;, 71, 23]
[id, f1, 72, 3]
[assgn, =, 72, 6]
[id, f1, 72, 8]
[dot, ., 72, 10]
[id, build, 72, 11]
[openpr, (, 72, 16]
[intlit, 2, 72, 17]
[comma, ,, 72, 18]
[floatlit, 3.5, 72, 20]
[closepr, ), 72, 23]
[semi, ;, 72, 24]
[id, f2, 73, 3]
[assgn, =, 73, 6]
[id, f2, 73, 8]
[dot, ., 73, 10]
[id, build, 73, 11]
[openpr, (, 73, 16]
[minus, -, 73, 17]
[floatlit, 2.0, 73, 18]
[comma, ,, 73, 21]
[floatlit, 1.0, 73, 23]
[comma, ,, 73, 26]
[floatlit, 0.0, 73, 28]
[closepr, ), 73, 31]
[semi, ;, 73, 32]
[id, counter, 74, 3]
[assgn, =, 74, 11]
[intlit, 1, 74, 13]
[semi, ;, 74, 14]
[while, while, 76, 3]
[openpr, (, 76, 8]
[id, counter, 76, 9]
[lesseq, <=, 76, 17]
[intlit, 10, 76, 20]
[closepr, ), 76, 22]
[opencpr, {, 77, 3]
[write, write, 78, 5]
[openpr, (, 78, 10]
[id, counter, 78, 11]
[closepr, ), 78, 18]
[semi, ;, 78, 19]
[write, write, 79, 5]
[openpr, (, 79, 10]
[id, f1, 79, 11]
[dot, ., 79, 13]
[id, evaluate, 79, 14]
[openpr, (, 79, 22]
[id, counter, 79, 23]
[closepr, ), 79, 30]
[closepr, ), 79, 31]
[semi, ;, 79, 32]
[write, write, 80, 5]
[openpr, (, 80, 10]
[id, f2, 80, 11]
[dot, ., 80, 13]
[id, evaluate, 80, 14]
[openpr, (, 80, 22]
[id, counter, 80, 23]
[closepr, ), 80, 30]
[closepr, ), 80, 31]
[semi, ;, 80, 32]
[closecpr, }, 81, 3]
[semi, ;, 81, 4]
[closecpr, }, 82, 1]
[blockcmt, b'\\n\\n    classes\\n\\n    --------------------------------------\\n\\n| | no class declaration\\n\\n| | class declaration\\n\\n|X| multiple class declarations\\n\\n|X| no data member declaration\\n\\n|X| data member declaration\\n\\n|X| multiple data member declaration\\n\\n| | no member function declaration\\n\\n|X| member function declaration\\n\\n|X| multiple member function declaration\\n\\n| | no member\\n\\n|X| no inherited class\\n\\n|X| one inherited class\\n\\n| | multiple inherited classes\\n\\n|X| private member specifier\\n\\n|X| public member specifier\\n\\n\\n\\n    functions: definitions\\n\\n    --------------------------------------\\n\\n| | no main function definition\\n\\n|X| main function definition\\n\\n|X| no free function definition\\n\\n| | free function definition\\n\\n| | multiple free function definitions\\n\\n| | no member function definition\\n\\n|X| member function definition\\n\\n|X| multiple member function definitions\\n\\n| | return type: void\\n\\n| | return type: integer\\n\\n|X| return type: float\\n\\n|X| return type: id\\n\\n| | return type: array (not allowed)\\n\\n\\n\\n    functions: formal parameters\\n\\n    --------------------------------------\\n\\n| | type: integer\\n\\n|X| type: float\\n\\n| | type: id\\n\\n| | type: 1-dim array \\n\\n| | type: n-dim array\\n\\n| | type: array (with size)\\n\\n| | type: array (without size)\\n\\n\\n\\n    functions: calls\\n\\n    --------------------------------------\\n\\n| | free function call\\n\\n|X| member function call\\n\\n| | parameters:0\\n\\n|X| parameters:1\\n\\n|X| parameters:n\\n\\n| | array parameter - 1-dim\\n\\n| | array parameter - n-dim\\n\\n| | array parameter - with size\\n\\n| | array parameter - without size\\n\\n| | function call as statement\\n\\n|X| function call as expression factor\\n\\n| | expression as parameter\\n\\n\\n\\n    variable declaration\\n\\n    --------------------------------------\\n\\n| | type: integer\\n\\n| | type: float\\n\\n| | type: string\\n\\n|X| type: id\\n\\n| | type: 1-dim array \\n\\n| | type: n-dim array\\n\\n| | type: array (with size)\\n\\n| | type: array (without size)\\n\\n\\n\\n    function body: local variable declarations\\n\\n    --------------------------------------\\n\\n| | no local variable declarations\\n\\n|X| local variable declarations\\n\\n| | intertwined statements and variable declarations\\n\\n\\n\\n    function body: statements\\n\\n    --------------------------------------\\n\\n| | no statement\\n\\n| | 1 statement\\n\\n|X| n statements\\n\\n| | if statement\\n\\n| | if: empty then or else blocks\\n\\n| | if: 1-statement then or else blocks\\n\\n| | if: n-statements then or else blocks\\n\\n|X| while statement\\n\\n| | while: empty block\\n\\n| | while: 1-statement block\\n\\n|X| while: n-statement block\\n\\n| | read(<variable>) statement\\n\\n|X| write(<expr>) statement\\n\\n|X| return(<expr>) statement\\n\\n|X| assignment statement\\n\\n\\n\\n    variable + idnest\\n\\n    --------------------------------------\\n\\n|X| id\\n\\n|X| id.id\\n\\n|X| id.id(id)\\n\\n| | id(id).id\\n\\n| | id(id).id()\\n\\n| | id.id[id]\\n\\n| | id[id].id\\n\\n| | id[id].id[id]\\n\\n| | id.id[id][id]\\n\\n| | id[id][id].id\\n\\n| | id[id][id].id[id][id]\\n\\n| | id(id).id[id]\\n\\n| | id(id).id[id][id]\\n\\n| | expression as array index\\n\\n\\n\\n    expressions\\n\\n    --------------------------------------\\n\\n| | single variable\\n\\n| | involving addop\\n\\n| | involving multop\\n\\n| | involving relop\\n\\n|X| involving addop + multop\\n\\n| | involving multop + relop\\n\\n| | involving addop + multop + relop\\n\\n| | involving parentheses\\n\\n| | involving nested parenhteses\\n\\n| | involving not\\n\\n| | involving sign\\n\\n| | involving literals\\n\\n|X| involving variable + idnest\\n\\n|X| involving function calls\\n\\n| | involving all the above in one expression\\n\\n', 83, 1]
