[blockcmt, b' sort the array ', 1, 1]
[blockcmt, b' sort the array ', 1, 1]
[id, bubbleSort, 2, 6]
[openpr, (, 2, 16]
[id, arr, 2, 17]
[colon, :, 2, 20]
[integer, integer, 2, 22]
[openspr, [, 2, 29]
[closespr, ], 2, 30]
[comma, ,, 2, 31]
[id, size, 2, 33]
[colon, :, 2, 37]
[integer, integer, 2, 39]
[closepr, ), 2, 46]
[arrow, ->, 2, 48]
[void, void, 2, 51]
[opencpr, {, 3, 1]
[let, let, 4, 3]
[id, n, 4, 7]
[colon, :, 4, 8]
[integer, integer, 4, 10]
[semi, ;, 4, 17]
[let, let, 5, 3]
[id, i, 5, 7]
[colon, :, 5, 8]
[integer, integer, 5, 10]
[semi, ;, 5, 17]
[let, let, 6, 3]
[id, j, 6, 7]
[colon, :, 6, 8]
[integer, integer, 6, 10]
[semi, ;, 6, 17]
[let, let, 7, 3]
[id, temp, 7, 7]
[colon, :, 7, 11]
[integer, integer, 7, 13]
[semi, ;, 7, 20]
[id, n, 8, 3]
[assgn, =, 8, 5]
[id, size, 8, 7]
[semi, ;, 8, 11]
[id, i, 9, 3]
[assgn, =, 9, 5]
[intlit, 0, 9, 7]
[semi, ;, 9, 8]
[id, j, 10, 3]
[assgn, =, 10, 5]
[intlit, 0, 10, 7]
[semi, ;, 10, 8]
[id, temp, 11, 3]
[assgn, =, 11, 8]
[intlit, 0, 11, 10]
[semi, ;, 11, 11]
[while, while, 12, 3]
[openpr, (, 12, 9]
[id, i, 12, 10]
[lt, <, 12, 12]
[id, n, 12, 14]
[minus, -, 12, 15]
[intlit, 1, 12, 16]
[closepr, ), 12, 17]
[opencpr, {, 12, 19]
[while, while, 13, 5]
[openpr, (, 13, 11]
[id, j, 13, 12]
[lt, <, 13, 14]
[id, n, 13, 16]
[minus, -, 13, 17]
[id, i, 13, 18]
[minus, -, 13, 19]
[intlit, 1, 13, 20]
[closepr, ), 13, 21]
[opencpr, {, 13, 23]
[if, if, 14, 7]
[openpr, (, 14, 10]
[id, arr, 14, 11]
[openspr, [, 14, 14]
[id, j, 14, 15]
[closespr, ], 14, 16]
[gt, >, 14, 18]
[id, arr, 14, 20]
[openspr, [, 14, 23]
[id, j, 14, 24]
[plus, +, 14, 25]
[intlit, 1, 14, 26]
[closespr, ], 14, 27]
[closepr, ), 14, 28]
[then, then, 15, 9]
[opencpr, {, 15, 14]
[inlinecmt,  swap temp and arr[i], 16, 11]
[inlinecmt,  swap temp and arr[i], 16, 11]
[assgn, =, 17, 16]
[id, arr, 17, 18]
[openspr, [, 17, 21]
[id, j, 17, 22]
[closespr, ], 17, 23]
[semi, ;, 17, 24]
[id, arr, 18, 11]
[openspr, [, 18, 14]
[id, j, 18, 15]
[closespr, ], 18, 16]
[assgn, =, 18, 18]
[id, arr, 18, 20]
[openspr, [, 18, 23]
[id, j, 18, 24]
[plus, +, 18, 25]
[intlit, 1, 18, 26]
[closespr, ], 18, 27]
[semi, ;, 18, 28]
[id, arr, 19, 11]
[openspr, [, 19, 14]
[id, j, 19, 15]
[plus, +, 19, 16]
[intlit, 1, 19, 17]
[closespr, ], 19, 18]
[assgn, =, 19, 20]
[id, temp, 19, 22]
[semi, ;, 19, 26]
[closecpr, }, 20, 9]
[else, else, 20, 11]
[semi, ;, 20, 16]
[id, j, 21, 9]
[assgn, =, 21, 11]
[id, j, 21, 13]
[plus, +, 21, 14]
[intlit, 1, 21, 15]
[semi, ;, 21, 16]
[closecpr, }, 22, 7]
[semi, ;, 22, 8]
[id, i, 23, 5]
[assgn, =, 23, 7]
[id, i, 23, 9]
[plus, +, 23, 10]
[intlit, 1, 23, 11]
[semi, ;, 23, 12]
[closecpr, }, 24, 3]
[semi, ;, 24, 4]
[closecpr, }, 25, 1]
[blockcmt, b' print the array ', 27, 1]
[blockcmt, b' print the array ', 27, 1]
[id, printArray, 28, 6]
[openpr, (, 28, 16]
[id, arr, 28, 17]
[colon, :, 28, 20]
[integer, integer, 28, 22]
[openspr, [, 28, 29]
[closespr, ], 28, 30]
[comma, ,, 28, 31]
[id, size, 28, 33]
[colon, :, 28, 37]
[integer, integer, 28, 39]
[closepr, ), 28, 46]
[arrow, ->, 28, 48]
[void, void, 28, 51]
[opencpr, {, 29, 1]
[let, let, 30, 3]
[id, n, 30, 7]
[colon, :, 30, 8]
[integer, integer, 30, 10]
[semi, ;, 30, 17]
[let, let, 31, 3]
[id, i, 31, 7]
[colon, :, 31, 8]
[integer, integer, 31, 10]
[semi, ;, 31, 17]
[id, n, 32, 3]
[assgn, =, 32, 5]
[id, size, 32, 7]
[semi, ;, 32, 11]
[id, i, 33, 3]
[assgn, =, 33, 5]
[intlit, 0, 33, 7]
[semi, ;, 33, 8]
[while, while, 34, 3]
[openpr, (, 34, 9]
[id, i, 34, 10]
[lt, <, 34, 11]
[id, n, 34, 12]
[closepr, ), 34, 13]
[opencpr, {, 34, 15]
[write, write, 35, 5]
[openpr, (, 35, 10]
[id, arr, 35, 11]
[openspr, [, 35, 14]
[id, i, 35, 15]
[closespr, ], 35, 16]
[closepr, ), 35, 17]
[semi, ;, 35, 18]
[id, i, 36, 7]
[assgn, =, 36, 9]
[id, i, 36, 11]
[plus, +, 36, 12]
[intlit, 1, 36, 13]
[semi, ;, 36, 14]
[closecpr, }, 37, 3]
[semi, ;, 37, 4]
[closecpr, }, 38, 1]
[inlinecmt,  main funtion to test above, 40, 1]
[inlinecmt,  main funtion to test above, 40, 1]
[id, main, 41, 6]
[openpr, (, 41, 10]
[closepr, ), 41, 11]
[arrow, ->, 41, 13]
[void, void, 41, 16]
[opencpr, {, 42, 1]
[let, let, 43, 3]
[id, arr, 43, 7]
[colon, :, 43, 10]
[integer, integer, 43, 12]
[openspr, [, 43, 19]
[intlit, 7, 43, 20]
[closespr, ], 43, 21]
[semi, ;, 43, 22]
[id, arr, 44, 3]
[openspr, [, 44, 6]
[intlit, 0, 44, 7]
[closespr, ], 44, 8]
[assgn, =, 44, 10]
[intlit, 64, 44, 12]
[semi, ;, 44, 14]
[id, arr, 45, 3]
[openspr, [, 45, 6]
[intlit, 1, 45, 7]
[closespr, ], 45, 8]
[assgn, =, 45, 10]
[intlit, 34, 45, 12]
[semi, ;, 45, 14]
[id, arr, 46, 3]
[openspr, [, 46, 6]
[intlit, 2, 46, 7]
[closespr, ], 46, 8]
[assgn, =, 46, 10]
[intlit, 25, 46, 12]
[semi, ;, 46, 14]
[id, arr, 47, 3]
[openspr, [, 47, 6]
[intlit, 3, 47, 7]
[closespr, ], 47, 8]
[assgn, =, 47, 10]
[intlit, 12, 47, 12]
[semi, ;, 47, 14]
[id, arr, 48, 3]
[openspr, [, 48, 6]
[intlit, 4, 48, 7]
[closespr, ], 48, 8]
[assgn, =, 48, 10]
[intlit, 22, 48, 12]
[semi, ;, 48, 14]
[id, arr, 49, 3]
[openspr, [, 49, 6]
[intlit, 5, 49, 7]
[closespr, ], 49, 8]
[assgn, =, 49, 10]
[intlit, 11, 49, 12]
[semi, ;, 49, 14]
[id, arr, 50, 3]
[openspr, [, 50, 6]
[intlit, 6, 50, 7]
[closespr, ], 50, 8]
[assgn, =, 50, 10]
[intlit, 90, 50, 12]
[semi, ;, 50, 14]
[id, printarray, 51, 3]
[openpr, (, 51, 13]
[id, arr, 51, 14]
[comma, ,, 51, 17]
[intlit, 7, 51, 19]
[closepr, ), 51, 20]
[semi, ;, 51, 21]
[id, bubbleSort, 52, 3]
[openpr, (, 52, 13]
[id, arr, 52, 14]
[comma, ,, 52, 17]
[intlit, 7, 52, 19]
[closepr, ), 52, 20]
[semi, ;, 52, 21]
[id, printarray, 53, 3]
[openpr, (, 53, 13]
[id, arr, 53, 14]
[comma, ,, 53, 17]
[intlit, 7, 53, 19]
[closepr, ), 53, 20]
[semi, ;, 53, 21]
[closecpr, }, 54, 1]
[blockcmt, b'\\n\\n    classes\\n\\n    --------------------------------------\\n\\n|X| no class declaration\\n\\n| | class declaration\\n\\n| | multiple class declarations\\n\\n| | no data member declaration\\n\\n| | data member declaration\\n\\n| | multiple data member declaration\\n\\n| | no member function declaration\\n\\n| | member function declaration\\n\\n| | multiple member function declaration\\n\\n| | no member\\n\\n| | no inherited class\\n\\n| | one inherited class\\n\\n| | multiple inherited classes\\n\\n| | private member specifier\\n\\n| | public member specifier\\n\\n\\n\\n    functions: definitions\\n\\n    --------------------------------------\\n\\n| | no main function definition\\n\\n|X| main function definition\\n\\n| | no free function definition\\n\\n|X| free function definition\\n\\n|X| multiple free function definitions\\n\\n|X| no member function definition\\n\\n| | member function definition\\n\\n| | multiple member function definitions\\n\\n|X| return type: void\\n\\n| | return type: integer\\n\\n| | return type: float\\n\\n| | return type: id\\n\\n| | return type: array (not allowed)\\n\\n\\n\\n    functions: formal parameters\\n\\n    --------------------------------------\\n\\n|X| type: integer\\n\\n| | type: float\\n\\n| | type: id\\n\\n|X| type: 1-dim array \\n\\n| | type: n-dim array\\n\\n| | type: array (with size)\\n\\n|X| type: array (without size)\\n\\n\\n\\n    functions: calls\\n\\n    --------------------------------------\\n\\n|X| free function call\\n\\n| | member function call\\n\\n| | parameters:0\\n\\n| | parameters:1\\n\\n|X| parameters:n\\n\\n|X| array parameter - 1-dim\\n\\n| | array parameter - n-dim\\n\\n| | array parameter - with size\\n\\n| | array parameter - without size\\n\\n| | function call as statement\\n\\n| | function call as expression factor\\n\\n| | expression as parameter\\n\\n\\n\\n    variable declaration\\n\\n    --------------------------------------\\n\\n|X| type: integer\\n\\n| | type: float\\n\\n| | type: string\\n\\n| | type: id\\n\\n|X| type: 1-dim array \\n\\n| | type: n-dim array\\n\\n|X| type: array (with size)\\n\\n| | type: array (without size) (not allowed)\\n\\n\\n\\n    function body: local variable declarations\\n\\n    --------------------------------------\\n\\n| | no local variable declarations\\n\\n|X| local variable declarations\\n\\n| | intertwined statements and variable declarations\\n\\n\\n\\n    function body: statements\\n\\n    --------------------------------------\\n\\n| | no statement\\n\\n| | 1 statement\\n\\n|X| n statements\\n\\n|X| if statement\\n\\n|X| if: empty then or else blocks\\n\\n| | if: 1-statement then or else blocks\\n\\n|X| if: n-statements then or else blocks\\n\\n|X| while statement\\n\\n| | while: empty block\\n\\n| | while: 1-statement block\\n\\n|X| while: n-statement block\\n\\n| | read(<variable>) statement\\n\\n|X| write(<expr>) statement\\n\\n|X| return(<expr>) statement\\n\\n|X| assignment statement\\n\\n\\n\\n    variable + idnest\\n\\n    --------------------------------------\\n\\n|X| id\\n\\n| | id.id\\n\\n| | id.id(id)\\n\\n| | id(id).id\\n\\n| | id(id).id()\\n\\n| | id.id[id]\\n\\n| | id[id].id\\n\\n| | id[id].id[id]\\n\\n| | id.id[id][id]\\n\\n| | id[id][id].id\\n\\n| | id[id][id].id[id][id]\\n\\n| | id(id).id[id]\\n\\n| | id(id).id[id][id]\\n\\n| | expression as array index\\n\\n\\n\\n    expressions\\n\\n    --------------------------------------\\n\\n|X| single variable\\n\\n|X| involving addop\\n\\n| | involving multop\\n\\n|X| involving relop\\n\\n| | involving addop + multop\\n\\n|X| involving multop + relop\\n\\n| | involving addop + multop + relop\\n\\n| | involving parentheses\\n\\n| | involving nested parentheses\\n\\n| | involving not\\n\\n| | involving sign\\n\\n|X| involving literals\\n\\n| | involving variable + idnest\\n\\n|X| involving function calls\\n\\n| | involving all the above in one expression\\n\\n', 56, 1]
[blockcmt, b'\\n\\n    classes\\n\\n    --------------------------------------\\n\\n|X| no class declaration\\n\\n| | class declaration\\n\\n| | multiple class declarations\\n\\n| | no data member declaration\\n\\n| | data member declaration\\n\\n| | multiple data member declaration\\n\\n| | no member function declaration\\n\\n| | member function declaration\\n\\n| | multiple member function declaration\\n\\n| | no member\\n\\n| | no inherited class\\n\\n| | one inherited class\\n\\n| | multiple inherited classes\\n\\n| | private member specifier\\n\\n| | public member specifier\\n\\n\\n\\n    functions: definitions\\n\\n    --------------------------------------\\n\\n| | no main function definition\\n\\n|X| main function definition\\n\\n| | no free function definition\\n\\n|X| free function definition\\n\\n|X| multiple free function definitions\\n\\n|X| no member function definition\\n\\n| | member function definition\\n\\n| | multiple member function definitions\\n\\n|X| return type: void\\n\\n| | return type: integer\\n\\n| | return type: float\\n\\n| | return type: id\\n\\n| | return type: array (not allowed)\\n\\n\\n\\n    functions: formal parameters\\n\\n    --------------------------------------\\n\\n|X| type: integer\\n\\n| | type: float\\n\\n| | type: id\\n\\n|X| type: 1-dim array \\n\\n| | type: n-dim array\\n\\n| | type: array (with size)\\n\\n|X| type: array (without size)\\n\\n\\n\\n    functions: calls\\n\\n    --------------------------------------\\n\\n|X| free function call\\n\\n| | member function call\\n\\n| | parameters:0\\n\\n| | parameters:1\\n\\n|X| parameters:n\\n\\n|X| array parameter - 1-dim\\n\\n| | array parameter - n-dim\\n\\n| | array parameter - with size\\n\\n| | array parameter - without size\\n\\n| | function call as statement\\n\\n| | function call as expression factor\\n\\n| | expression as parameter\\n\\n\\n\\n    variable declaration\\n\\n    --------------------------------------\\n\\n|X| type: integer\\n\\n| | type: float\\n\\n| | type: string\\n\\n| | type: id\\n\\n|X| type: 1-dim array \\n\\n| | type: n-dim array\\n\\n|X| type: array (with size)\\n\\n| | type: array (without size) (not allowed)\\n\\n\\n\\n    function body: local variable declarations\\n\\n    --------------------------------------\\n\\n| | no local variable declarations\\n\\n|X| local variable declarations\\n\\n| | intertwined statements and variable declarations\\n\\n\\n\\n    function body: statements\\n\\n    --------------------------------------\\n\\n| | no statement\\n\\n| | 1 statement\\n\\n|X| n statements\\n\\n|X| if statement\\n\\n|X| if: empty then or else blocks\\n\\n| | if: 1-statement then or else blocks\\n\\n|X| if: n-statements then or else blocks\\n\\n|X| while statement\\n\\n| | while: empty block\\n\\n| | while: 1-statement block\\n\\n|X| while: n-statement block\\n\\n| | read(<variable>) statement\\n\\n|X| write(<expr>) statement\\n\\n|X| return(<expr>) statement\\n\\n|X| assignment statement\\n\\n\\n\\n    variable + idnest\\n\\n    --------------------------------------\\n\\n|X| id\\n\\n| | id.id\\n\\n| | id.id(id)\\n\\n| | id(id).id\\n\\n| | id(id).id()\\n\\n| | id.id[id]\\n\\n| | id[id].id\\n\\n| | id[id].id[id]\\n\\n| | id.id[id][id]\\n\\n| | id[id][id].id\\n\\n| | id[id][id].id[id][id]\\n\\n| | id(id).id[id]\\n\\n| | id(id).id[id][id]\\n\\n| | expression as array index\\n\\n\\n\\n    expressions\\n\\n    --------------------------------------\\n\\n|X| single variable\\n\\n|X| involving addop\\n\\n| | involving multop\\n\\n|X| involving relop\\n\\n| | involving addop + multop\\n\\n|X| involving multop + relop\\n\\n| | involving addop + multop + relop\\n\\n| | involving parentheses\\n\\n| | involving nested parentheses\\n\\n| | involving not\\n\\n| | involving sign\\n\\n|X| involving literals\\n\\n| | involving variable + idnest\\n\\n|X| involving function calls\\n\\n| | involving all the above in one expression\\n\\n', 56, 1]
